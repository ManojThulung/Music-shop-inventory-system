/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Musico.InventorySystem;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;

/**
 *
 * @author Lenovo
 */
public class AppliancesInfo extends javax.swing.JFrame {

    /**
     * Creates new form Musicoinformationlist
     */
     private static  ArrayList<InstrumentData> list = new ArrayList();
     
    public AppliancesInfo() {
        initComponents();
        setIconImage(); // sets icon in the frame
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnpricesearch = new javax.swing.JButton();
        jCategorycombo = new javax.swing.JComboBox<>();
        jtxtPriceSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMusicoIS = new javax.swing.JTable();
        jbtnClose = new javax.swing.JButton();
        jbtnAddItem = new javax.swing.JButton();
        jbtnCategorySearch = new javax.swing.JButton();
        jbtnnamesearch = new javax.swing.JButton();
        jtxtnameSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbtnClose2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Musico Inventory System");
        setFocusCycleRoot(false);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbtnpricesearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnpricesearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/searchbyprice.png"))); // NOI18N
        jbtnpricesearch.setText("Search by Price");
        jbtnpricesearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnpricesearchActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnpricesearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 240, 50));

        jCategorycombo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jCategorycombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "\t", "Guitar", "keyboard", "Brass", "WoodWind", "Bowed ", "Nepali folk instrument" }));
        getContentPane().add(jCategorycombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 250, 40));

        jtxtPriceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtPriceSearchActionPerformed(evt);
            }
        });
        getContentPane().add(jtxtPriceSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 250, 40));

        tblMusicoIS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblMusicoIS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblMusicoIS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id no", "Item Name", "Total item", "Range", "Category", "Brand", "Price", "Discount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMusicoIS.setRowHeight(30);
        jScrollPane1.setViewportView(tblMusicoIS);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 900, 300));

        jbtnClose.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/cls.png"))); // NOI18N
        jbtnClose.setText("Clear");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 580, 140, 30));

        jbtnAddItem.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jbtnAddItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/add new instrument.png"))); // NOI18N
        jbtnAddItem.setText("Add Item");
        jbtnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddItemActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnAddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 180, 50));

        jbtnCategorySearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnCategorySearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/searchbyprice.png"))); // NOI18N
        jbtnCategorySearch.setText("Search by Category");
        jbtnCategorySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCategorySearchActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnCategorySearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 240, 50));

        jbtnnamesearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnnamesearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/searchbyprice.png"))); // NOI18N
        jbtnnamesearch.setText("Search by Item name");
        jbtnnamesearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnnamesearchActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnnamesearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 140, 240, 50));

        jtxtnameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtnameSearchActionPerformed(evt);
            }
        });
        jtxtnameSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtnameSearchKeyPressed(evt);
            }
        });
        getContentPane().add(jtxtnameSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, 250, 40));

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        jLabel1.setText("Appliances Information System");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 550, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/textbackground.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-90, 0, 450, 630));

        jbtnClose2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnClose2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/Close.png"))); // NOI18N
        jbtnClose2.setText("CLOSE");
        jbtnClose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClose2ActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnClose2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 580, -1, -1));

        jLabel3.setDisplayedMnemonic('M');
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Musico/InventorySystem/textbackground.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, -140, 580, 770));

        setSize(new java.awt.Dimension(932, 672));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtPriceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtPriceSearchActionPerformed
    }//GEN-LAST:event_jtxtPriceSearchActionPerformed

    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        //setVisible(false);  // Close AppliancesInfo frame
        jtxtPriceSearch.setText("");
        jtxtnameSearch.setText("");
    }//GEN-LAST:event_jbtnCloseActionPerformed

    public void sorting(){
 
    int num = Integer.parseInt(jtxtPriceSearch.getText()); // num to sort and find
   
    sort(list); // calling sort() to sort prices
    int index = binarysearch(list,0,list.size(),num); // calling binarysearch () of 236 line code to find the index of price
    if(index == -1){
    JOptionPane.showMessageDialog(this,"There's no item of this price here.","Error",JOptionPane.ERROR_MESSAGE );
}
else{ // printing the details of item of that price
    JOptionPane.showMessageDialog(this, "The details of the item of the chosen price are \n "+ "Id no : " 
            +list.get(index).getIdNo() + 
            "\n Item name: "+ list.get(index).getItemName()
            + "\n Total Item: "+ list.get(index).getTotalItem()
            + "\n Range: "+ list.get(index).getItemRange()
            + "\n Category: "+ list.get(index).getCategory()
            + "\n Brand: "+ list.get(index).getprice()
            + "\n Price: "+ list.get(index).getBrand()
            + "\n Discount: "+ list.get(index).getDiscount());

}

    }
    // sort method
     public void sort(ArrayList<InstrumentData> list){
        for(int i = 0; i<list.size()-1; i++){
            int minpose = i;
            for(int j = i+1; j<list.size(); j++){
                if(list.get(minpose) .getprice()>list.get(j).getprice()){
                    minpose = j;
                }
            }
                     Collections.swap(list, minpose, i);
        }
    }
    // binary search code
      public static  int binarysearch(ArrayList<InstrumentData> ar,int low,int high,int key){
        if(low<=high){
            int mid = (low+high)/2;
            if(ar.get(mid).getprice() == key){
                return mid;
            }
            else if (ar.get(mid).getprice()>key){               // if element is smaller than mid value then it can be present only in left array
                return (binarysearch(ar, low, mid-1, key));
            }
            else {
                return(binarysearch(ar, mid+1, high, key));  // if element is greater than mid value then it can be present only in right array.
            }
        }
        else {
            return -1;
        }
    }
    
      // code to search items on the basis of price.
    private void jbtnpricesearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnpricesearchActionPerformed
          try{
if(jtxtPriceSearch.getText().equals("")){
JOptionPane.showMessageDialog(this,"Please Enter the field","Error",JOptionPane.ERROR_MESSAGE);
}
else {
Integer.parseInt(jtxtPriceSearch.getText());
sorting();
}}
catch(NumberFormatException e){
JOptionPane.showMessageDialog(this,"String is invalid");
}
    }//GEN-LAST:event_jbtnpricesearchActionPerformed


// code to check if there are empty rows in the table
    private void jbtnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddItemActionPerformed
        // This method is to display the AddNewInstruement frame and set the ID No of intems.
       int id = 1;
        int rowCount = tblMusicoIS.getRowCount();
        int nextRow = 0;
        Boolean emptyRowFlag = false;
        String r;
      
        do{
            r = (String)tblMusicoIS.getValueAt(nextRow, 1);
            if (r != null && r.length() != 0){
                nextRow++;
                id++;
            }
            else {
                emptyRowFlag = true;
            }
        } while (nextRow < rowCount && !emptyRowFlag);
        // Object of AddNewInstrument class.
        AddNewInstrument instrumentObj = new AddNewInstrument();
         instrumentObj.setVisible(true); //Display AddNewInstrumet Frame.
        
        instrumentObj.setIdNum(id); // Method called form the AddNewInstrument class to set ID number in the textfield of ID no.
       
       
    }//GEN-LAST:event_jbtnAddItemActionPerformed

    // code to search items on the basis of item category
    private void jbtnCategorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCategorySearchActionPerformed
        // TODO add your handling code here:
        // This code searches items of a selected price
        String category = (String)jCategorycombo.getSelectedItem();
		ArrayList<String> names = new ArrayList<>();
		int count = 0;
		//int nocount = 0;
		for(int i = 0; i<list.size(); i++){
			if(category.equals(list.get(i).getCategory())){
				count++;
				names.add(list.get(i).getItemName());
			}
		}
		if (count == 0){

            JOptionPane.showMessageDialog(rootPane,"No items has been selected"+"\n Since there is no item of that category.",
            "Error",JOptionPane.ERROR_MESSAGE);

}
        else{
JOptionPane.showMessageDialog(this,"There are "+names.size()+" items in "+category+"\nThe names of the item are: "+names);
}
    }//GEN-LAST:event_jbtnCategorySearchActionPerformed

    //code to search item  on the basis of item name
    private void jbtnnamesearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnnamesearchActionPerformed
        // TODO add your handling code here:
        String itemname = jtxtnameSearch.getText().toLowerCase().trim();
		//ArrayList<String> names = new ArrayList<>();
		int count = 0;
                int index = 0;
		//int nocount = 0;
		for(int i = 0; i<list.size(); i++){
                    String secondname =  list.get(i).getItemName().toLowerCase();
			if(itemname.equals(secondname)){
				count++;
				index = i;
                                break;
			}
		}
                try{
if(jtxtnameSearch.getText().equals("")){
JOptionPane.showMessageDialog(this,"Please Enter the field","ERROR",JOptionPane.ERROR_MESSAGE);
}
else if (count == 0){
 JOptionPane.showMessageDialog(rootPane,"No items has been selected"+"\n Since there is no item of that name.",
            "Error",JOptionPane.ERROR_MESSAGE);
}
                else{
JOptionPane.showMessageDialog(this,"The details of the item "+itemname.toUpperCase()+" are:\n"+" ID no: "+list.get(index).getIdNo()+
         "\n Total Item: "+ list.get(index).getTotalItem()
            + "\n Range: "+ list.get(index).getItemRange()
            + "\n Category: "+ list.get(index).getCategory()
            + "\n Price: "+ list.get(index).getprice()
            + "\n Brand: "+ list.get(index).getBrand()
            + "\n Discount: "+ list.get(index).getDiscount()
        );
}
                }
catch(NumberFormatException e){
JOptionPane.showMessageDialog(this,"String is invalid","ERROR",JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_jbtnnamesearchActionPerformed

    private void jtxtnameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtnameSearchActionPerformed

    }//GEN-LAST:event_jtxtnameSearchActionPerformed

    private void jtxtnameSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtnameSearchKeyPressed
        // TODO add your handling code here:
          // This code allows only alphabets value to be entered in textfield 
        char c = evt.getKeyChar();
if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
jtxtnameSearch.setEditable(true);
}
else{
jtxtnameSearch.setEditable(false);
}
    }//GEN-LAST:event_jtxtnameSearchKeyPressed

    private void jbtnClose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClose2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jbtnClose2ActionPerformed

    public void importData(){
        // This method is to import the data from the .csv file to the table.
        int rowCount = tblMusicoIS.getRowCount(); // Returns the number of row present in the table.
        int colCount = tblMusicoIS.getColumnCount(); // Returns the number of column present in the table.
        int idNo = 1;
        int nextRow = 0; // To find the empty row.
        Boolean emptyRow = false; // To check whether the row is empty or not.
        String data;
        String rowData;
        
        try {
                                                                    //file name
            BufferedReader br = new BufferedReader(new FileReader("InstrumentDetails.csv")); 
            try {
                while((rowData = br.readLine()) != null){
                    int rowIndex = 0;
                    do {
                        data = (String)tblMusicoIS.getValueAt(nextRow, 1); // Returns the value of in table of index(nextRow, 1) and converts to string.
                        if (data != null && data.length() != 0){
                            nextRow++;
                            idNo++;
                        } else {
                            emptyRow = true;
                        }
                    } while (rowCount > nextRow && !emptyRow);
                    
                    String[] value = rowData.split(",");
                    
                    for (int i = 0; i < colCount; i++){
                        if (i == 0){
                            tblMusicoIS.setValueAt(idNo, nextRow, i); // Set value in the Jtable.
                        } else if (i == 2 || i == 6){
                            tblMusicoIS.setValueAt(Integer.parseInt(value[rowIndex]), nextRow, i); // Set value in the Jtable by converting string to integer.
                            rowIndex++;
                        } else {
                            tblMusicoIS.setValueAt(value[rowIndex], nextRow, i); // Set value in the Jtable.
                            rowIndex++;
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException ae) { // It is thrown when the index is not equal to the size of array.
                JOptionPane.showMessageDialog(rootPane, "There is no suuicient space in table to add all the data from file(.csv).", "Error!", JOptionPane.ERROR_MESSAGE);
                
            } catch (IOException ioe){ // It is thrown when there is no application associated with the given file type.
                JOptionPane.showMessageDialog(rootPane, "Error", "Error!", JOptionPane.ERROR_MESSAGE);
            
            }
        } catch (FileNotFoundException ex) { // It is thrown when the file does not found.
            JOptionPane.showMessageDialog(rootPane, "The file was not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static void addTable(String id, String itemName, String totalItem, String range, String category, String brand, String price, String discount){
            //This method add the user input data to the Inventory table.
            int rowCount = tblMusicoIS.getRowCount(); // Return the number of row present in the table.
            int nextRow = 0; // To find the empty row.
            Boolean emptyRowFlag = false; // To check whether the row is empty or not.
            String s;
            do{
                s = (String)tblMusicoIS.getValueAt(nextRow, 1); 
                if (s != null && s.length() != 0){
                    nextRow++;
                }
                else {
                    emptyRowFlag = true;
                }
            }while(rowCount > nextRow && !emptyRowFlag);

            if (emptyRowFlag){
                String[] value = {id, itemName, totalItem, range, category, brand, price, discount}; // Data adds to the string array value .
                int colCount = tblMusicoIS.getColumnCount(); // Return the number of column.
                InstrumentData obj = new InstrumentData(id, itemName, Integer.parseInt(totalItem), range, category, brand, Integer.parseInt(price), discount);
                //random(obj);
                list.add(obj);
                
                for (int i = 0; i < colCount; i++){
                    if(i == 0 || i == 2 || i == 6){
                        tblMusicoIS.setValueAt(Integer.parseInt(value[i]), nextRow, i); // Set value in the Jtable by converting string to integer.
                    }
                    else{
                        tblMusicoIS.setValueAt(value[i], nextRow, i); // Set value in the Jtable
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "There is no sufficient space in table to add", "No Space", JOptionPane.ERROR_MESSAGE);
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppliancesInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jCategorycombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAddItem;
    private javax.swing.JButton jbtnCategorySearch;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnClose2;
    private javax.swing.JButton jbtnnamesearch;
    private javax.swing.JButton jbtnpricesearch;
    private javax.swing.JTextField jtxtPriceSearch;
    private javax.swing.JTextField jtxtnameSearch;
    private static javax.swing.JTable tblMusicoIS;
    // End of variables declaration//GEN-END:variables

    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("titleicon.png")));
    }
}
